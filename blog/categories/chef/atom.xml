<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Mischa Taylor's Coding Blog]]></title>
  <link href="http://misheska.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://misheska.com/"/>
  <updated>2013-07-22T23:12:43-07:00</updated>
  <id>http://misheska.com/</id>
  <author>
    <name><![CDATA[Mischa Taylor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started writing Chef cookbooks the Berkshelf Way, Part 1]]></title>
    <link href="http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/"/>
    <updated>2013-06-16T03:49:00-07:00</updated>
    <id>http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#getting-started">Getting Started</a>    <ul>
      <li><a href="#upgrade-from-berkshelf-1x">Upgrade from Berkshelf 1.x</a></li>
    </ul>
  </li>
  <li><a href="#create-the-myface-application-cookbook">Create the MyFace Application Cookbook</a></li>
  <li><a href="#prepare-a-virtual-machine-for-testing">Prepare a virtual machine for testing</a></li>
  <li><a href="#iteration-1-create-an-application-user">Iteration #1: Create an application user</a>    <ul>
      <li><a href="#testing-iteration-1">Testing Iteration #1</a></li>
    </ul>
  </li>
  <li><a href="#iteration-2---refactor-to-attributes">Iteration #2 - Refactor to attributes</a>    <ul>
      <li><a href="#testing-iteration-2">Testing Iteration #2</a></li>
    </ul>
  </li>
  <li><a href="#iteration-3---install-the-apache2-web-server">Iteration #3 - Install the Apache2 Web Server</a>    <ul>
      <li><a href="#testing-iteration-3">Testing Iteration #3</a></li>
    </ul>
  </li>
  <li><a href="#iteration-4---add-content">Iteration #4 - Add Content</a></li>
  <li><a href="#disable-default-site">disable default site</a></li>
  <li><a href="#create-apache-config">create apache config</a></li>
  <li><a href="#create-document-root">create document root</a></li>
  <li><a href="#write-site">write site</a></li>
  <li><a href="#enable-myface">enable myface</a>    <ul>
      <li><a href="#testing-iteration-4">Testing Iteration #4</a></li>
    </ul>
  </li>
  <li><a href="#iteration-5---refactoring-webserver">Iteration #5 - Refactoring webserver</a></li>
  <li><a href="#disable-default-site-1">disable default site</a></li>
  <li><a href="#create-apache-config-1">create apache config</a></li>
  <li><a href="#create-document-root-1">create document root</a></li>
  <li><a href="#write-site-1">write site</a></li>
  <li><a href="#enable-myface-1">enable myface</a></li>
  <li><a href="#cookbook-name-myface">Cookbook Name:: myface</a></li>
  <li><a href="#disable-default-site-2">disable default site</a></li>
  <li><a href="#create-apache-config-2">create apache config</a></li>
  <li><a href="#create-document-root-2">create document root</a></li>
  <li><a href="#write-site-2">write site</a></li>
  <li><a href="#enable-myface-2">enable myface</a>    <ul>
      <li><a href="#testing-iteration-5">Testing Iteration #5</a></li>
    </ul>
  </li>
  <li><a href="#iteration-6---version-bump-and-production-deploy">Iteration #6 - Version Bump and Production Deploy</a>    <ul>
      <li><a href="#version-bump-to-100">Version Bump to 1.0.0</a></li>
      <li><a href="#configure-berkshelf">Configure Berkshelf</a></li>
      <li><a href="#upload-cookbooks">Upload cookbooks</a></li>
      <li><a href="#converge-node">Converge node</a></li>
      <li><a href="#testing-iteration-6">Testing Iteration #6</a></li>
    </ul>
  </li>
  <li><a href="#more-to-come">More to Come!</a></li>
</ul>

<p><em>Updated July 22nd, 2013</em></p>

<ul>
  <li><em>Bumped vagrant from version 1.2.3 to 1.2.4</em></li>
  <li><em>Bumped berkshelf from version 2.0.6 to 2.0.7</em></li>
  <li><em>Referenced Sean O’Meara’s &amp; Charles Johnson’s latest myface example app</em></li>
</ul>

<p><em>Updated July 9th, 2013</em></p>

<ul>
  <li><em>Bumped vagrant from version 1.2.2 to 1.2.3</em></li>
  <li><em>Bumped berkshelf from version 2.0.5 to 2.0.6</em></li>
  <li><em>Bumped VirtualBox from version 4.2.12 to 4.2.16</em></li>
  <li><em>Berkshelf 2.0.6 no longer needs the version constraint for test-kitchen - removed</em></li>
</ul>

<p>Jamie Winsor hasn’t yet updated his <a href="http://vialstudios.com/guide-authoring-cookbooks.html">guide to authoring cookbooks the Berkshelf way</a>
to match <a href="https://github.com/RiotGames/berkshelf/issues/416">recent changes related to Vagrant 1.x</a> and <a href="http://www.opscode.com/blog/2013/03/11/chef-11-server-up-and-running/">Chef 11</a>
This post is an attempt to update these instructions, walking through his
and Sean O’Meara’s example app - <a href="https://github.com/someara/myface-cookbook">MyFace</a>.
For more information on <a href="http://berkshelf.com/">Berkshelf</a>, check out his recent
<a href="http://www.youtube.com/watch?v=hYt0E84kYUI">talk</a>
and <a href="http://www.slideshare.net/resetexistence/the-berkshelf-way">slides</a>
from ChefConf 2013.</p>

<p>NOTE: The source code examples covered in this article can be found on
GitHub: <a href="https://github.com/misheska/myface">https://github.com/misheska/myface</a></p>

<h1 id="getting-started">Getting Started</h1>
<p>You can write Chef Cookbooks with Berkshelf on Mac OS X, Linux or Windows.
To set up your cookbook-writing environment, make sure you have the following
installed:</p>

<ul>
  <li>
    <p><a href="http://virtualbox.org">Install VirtualBox 4.2.x (or higher)</a>
NOTE: Avoid VirtualBox 4.2.14, <a href="https://twitter.com/mitchellh/status/348886504728305664">it breaks vagrant</a>.  VirtualBox 4.2.16 was tested for
this post.</p>
  </li>
  <li>
    <p><a href="http://vagrantup.com">Install Vagrant 1.2.1 (or higher, version 1.2.4 recommended)</a></p>
  </li>
  <li>
    <p>Install Ruby 1.9.x via <a href="http://misheska.com/blog/2013/06/16/use-opscode-chef-omnibus-ruby-for-writing-cookbooks/">Chef Omnibus Installer Ruby</a>, <a href="http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/">rvm</a> or <a href="http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby/">rbenv</a></p>
  </li>
  <li>
    <p>Install Berkshelf</p>
  </li>
</ul>

<p>```
$ gem install berkshelf –no-ri –no-rdoc
Fetching: berkshelf-2.0.7.gem (100%)
Successfully installed berkshelf-2.0.7
1 gem installed
$ berks -v
Berkshelf (2.0.7)</p>

<p>Copyright 2012-2013 Riot Games</p>

<pre><code>Jamie Winsor (&lt;jamie@vialstudios.com&gt;)
Josiah Kiehl (&lt;jkiehl@riotgames.com&gt;)
Michael Ivey (&lt;michael.ivey@riotgames.com&gt;)
Justin Campbell (&lt;justin.campbell@riotgames.com&gt;)
Seth Vargo (&lt;sethvargo@gmail.com&gt;) ```
</code></pre>

<ul>
  <li>Install the vagrant-berkshelf Plugin (1.3.3 or higher)</li>
</ul>

<p><code>
$ vagrant plugin install vagrant-berkshelf
Installing the 'vagrant-berkshelf' plugin. This can take a few minutes...
Installed the plugin 'vagrant-berkshelf (1.3.3)'!
</code></p>

<ul>
  <li>Install the vagrant-omnibus plugin (1.1.0 or higher)</li>
</ul>

<p><code>
$ vagrant plugin install vagrant-omnibus
Installing the 'vagrant-omnibus' plugin.  This can take a few minutes...
Installed the plugin 'vagrant-omnibus (1.1.0)'!
</code></p>

<h2 id="upgrade-from-berkshelf-1x">Upgrade from Berkshelf 1.x</h2>
<p>NOTE: If you had a previous 1.x version of the berkshelf plugin installed,
when it was named <code>berkshelf-vagrant</code>, which you can verify by running
the following command:</p>

<pre><code>$ vagrant plugin list
berkshelf-vagrant (1.1.3)
</code></pre>

<p>Make sure you fully uninstall the old <code>berkshelf-vagrant</code> plugin before
installing the new <code>vagrant-berkshelf</code> plugin, as vagrant will get confused
by the name change:</p>

<pre><code>$ vagrant plugin uninstall berkshelf-vagrant
Uninstalling the 'berkshelf-vagrant' plugin...
$ vagrant plugin install vagrant-berkshelf
Installing the 'vagrant-berkshelf' plugin.  This can take a few minutes...
</code></pre>

<h1 id="create-the-myface-application-cookbook">Create the MyFace Application Cookbook</h1>
<p>Key to the Berkshelf way is the use of the Application Cookbook Pattern.  An
application cookbook contains the list of recipes needed to build your
application or service.  As an example, this blog post will walk you through
the creation of an example service - MyFace - the next killer social web app.</p>

<p>First create a new cookbook for the MyFace application using the
<code>berks cookbook</code> command:</p>

<pre><code>$ berks cookbook myface
      create  myface/files/default
      create  myface/templates/default
      create  myface/attributes
      create  myface/definitions
      create  myface/libraries
      create  myface/providers
      create  myface/recipes
      create  myface/resources
      create  myface/recipes/default.rb
      create  myface/metadata.rb
      create  myface/LICENSE
      create  myface/README.md
      create  myface/Berksfile
      create  myface/Thorfile
      create  myface/chefignore
      create  myface/.gitignore
         run  git init from "./myface"
      create  myface/Gemfile
      create  myface/Vagrantfile
</code></pre>

<p>Run <code>bundle install</code> in the newly created cookbook directory to install the
necessary Gem dependencies:</p>

<pre><code>$ cd myface
$ bundle install
Fetching gem metadata from https://rubygems.org/........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using i18n (0.6.4)
Using multi_json (1.7.7)
Using activesupport (3.2.14)
. . .
Using berkshelf (2.0.7)
Using bundler (1.3.5)
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
</code></pre>

<h1 id="prepare-a-virtual-machine-for-testing">Prepare a virtual machine for testing</h1>
<p>It’s a good idea to develop your cookbook incrementally, testing 
in short iterations.  Berkshelf integrates with Vagrant to deploy
your cookbook changes to a virtual machine for testing.</p>

<p>Ensure that the <code>vagrant-omnibus</code> plugin is installed correctly.</p>

<pre><code>$ vagrant plugin list
...
vagrant-omnibus (1.1.0)
...
</code></pre>

<p>The <code>vagrant-omnibus</code> plugin hooks into Vagrant and allows you to specify
the version of the Chef Omnibus package you want installed using the
<code>omnibus.chef_version</code> key</p>

<p>Edit the Vagrantfile generated by the <code>berks cookbook</code> command to use
a VirtualBox template that does not have a version of Chef provisioned.
Then, specify that you want your image to always use the latest version
of Chef. (By default Berkshelf points to an image with an older version
of CentOS and Chef 11.2.0, which is also old).  Your Vagrantfile should look
like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/Vagrantfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="err">“</span><span class="mi">2</span><span class="err">”</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="o">-</span><span class="n">berkshelf</span><span class="err">”</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="err">“</span><span class="n">misheska</span><span class="o">-</span><span class="n">centos6</span><span class="o">.</span><span class="mi">4</span><span class="err">”</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="err">“</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">dropbox</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">s</span><span class="o">/</span><span class="n">y733o4ifkowc1w0</span><span class="o">/</span><span class="n">misheska</span><span class="o">-</span><span class="n">centos64</span><span class="o">.</span><span class="n">box</span><span class="err">”</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omnibus</span><span class="o">.</span><span class="n">chef_version</span> <span class="o">=</span> <span class="ss">:latest</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="err">“</span><span class="mi">33</span><span class="o">.</span><span class="mi">33</span><span class="o">.</span><span class="mi">33</span><span class="o">.</span><span class="mi">10</span><span class="err">”</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">max_tries</span> <span class="o">=</span> <span class="mi">40</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">120</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">berkshelf</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;config.vm.provision :chef_solo do |chef|</span>
</span><span class='line'><span class="sr">    chef.json = {</span>
</span><span class='line'><span class="sr">      :mysql =&amp;gt; {</span>
</span><span class='line'><span class="sr">        :server_root_password =&amp;gt; ‘rootpass’,</span>
</span><span class='line'><span class="sr">        :server_debian_password =&amp;gt; ‘debpass’,</span>
</span><span class='line'><span class="sr">        :server_repl_password =&amp;gt; ‘replpass’</span>
</span><span class='line'><span class="sr">      }</span>
</span><span class='line'><span class="sr">    }</span>
</span><span class='line'><span class="sr">    chef.run_list = [</span>
</span><span class='line'><span class="sr">      “recipe[myface::default]”</span>
</span><span class='line'><span class="sr">    ]</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Run <code>vagrant up</code> to start up the virtual machine and to test the stub MyFace
cookbook you just created:</p>

<pre><code>$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
[default] Box 'mishesksa-centos64' was not found. Fetching box from specified URL for
the provider 'virtualbox'. Note that if the URL does not have
a box for this provider, you should interrupt Vagrant now and add
the box yourself. Otherwise Vagrant will attempt to download the
full box prior to discovering this error.
Downloading or copying the box...
Extracting box...te: 3542k/s, Estimated time remaining: 0:00:01)
Successfully added box 'mishesksa-centos64' with provider 'virtualbox'!
[default] Importing base box 'mishesksa-centos64'...
[default] Matching MAC address for NAT networking...
[default] Setting the name of the VM...
[default] Clearing any previously set forwarded ports...
[Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/default/vagrant/berkshelf-20130722-92068-1y18eun-default'
[Berkshelf] Using myface (0.1.0)
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 22 =&gt; 2200 (adapter 1)
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Ensuring Chef is installed at requested version of 11.4.4.
[default] Chef 11.4.4 Omnibus package is not installed...installing now.
Downloading Chef 11.4.4 for el...
Installing Chef 11.4.4
warning: /tmp/tmp.Ro7kRMDB/chef-11.4.4.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 83ef826a: NOKEY
Preparing...                ##################################################
chef                        ##################################################
Thank you for installing Chef!
[default] Setting hostname...
[default] Configuring and enabling network interfaces...
[default] Mounting shared folders...
[default] -- /vagrant
[default] -- /tmp/vagrant-chef-1/chef-solo-1/cookbooks
[default] Running provisioner: chef_solo...
Generating chef JSON and uploading...
Running chef-solo...
[2013-06-16T10:28:25-07:00] INFO: *** Chef 11.4.4 ***
[2013-06-16T10:28:25-07:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
[2013-06-16T10:28:25-07:00] INFO: Run List is [recipe[myface::default]]
[2013-06-16T10:28:25-07:00] INFO: Run List expands to [myface::default]
[2013-06-16T10:28:25-07:00] INFO: Starting Chef Run for myface-berkshelf
[2013-06-16T10:28:25-07:00] INFO: Running start handlers
[2013-06-16T10:28:25-07:00] INFO: Start handlers complete.
[2013-06-16T10:28:25-07:00] INFO: Chef Run complete in 0.027690068 seconds
[2013-06-16T10:28:25-07:00] INFO: Running report handlers
[2013-06-16T10:28:25-07:00] INFO: Report handlers complete
</code></pre>

<p>If all goes well, you should see <code>Chef Run complete</code> with no errors.</p>

<p>NOTE: The basebox URL comes from my current collection of baseboxes.  The
following link points to a README file which provides links to all the
vagrant baseboxes I use (which I normally update frequently):
<a href="https://github.com/misheska/basebox-packer">https://github.com/misheska/basebox-packer</a></p>

<p>If you would ever like to delete your test virtual machine and start over,
you can destroy your test virtual machine with the <code>vagrant destroy</code> command:</p>

<pre><code>$ vagrant destroy
Are you sure you want to destroy the 'default' VM? [y/N] y
[default] Forcing shutdown of VM...
[default] Destroying VM and associated drives...
[Berkshelf] Cleaning Vagrant's berkshelf
</code></pre>

<p>Run <code>vagrant up</code> to recreate the test virtual machine.</p>

<p><strong>NOTE:</strong> If you just ran <code>vagrant destroy</code> make sure you run <code>vagrant up</code>
before proceeding to the next section.</p>

<h1 id="iteration-1-create-an-application-user">Iteration #1: Create an application user</h1>
<p>For our first short iteration, let’s create a <code>myface</code> user under which
we’ll run our application.  One best practice is to avoid running
applications as root and create a user/group under which the application runs
instead who has just enough rights that the app needs.</p>

<p>Edit <code>myface/recipes/default.rb</code> defining a new <a href="http://docs.opscode.com/resource_group.html">Group Resource</a>
and <a href="http://docs.opscode.com/resource_user.html">User Resource</a> for myface,
so it looks like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Cookbook Name:: myface</span>
</span><span class='line'><span class="c1"># Recipe:: default</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="err">“</span><span class="n">myface</span><span class="err">”</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;user “myface” do</span>
</span><span class='line'><span class="sr">  group “myface”</span>
</span><span class='line'><span class="sr">  system true</span>
</span><span class='line'><span class="sr">  shell “/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Save <code>recipes/default.rb</code> and re-run <code>vagrant provision</code> to create the
myface user on your test virtual machine:</p>

<pre><code>$ vagrant provision
[Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/default/vagrant/berkshelf-20130722-92068-1y18eun-default'
[Berkshelf] Using myface (0.1.0)
[default] Chef 11.4.4 Omnibus package is already installed.
[default] Running provisioner: chef_solo...
Generating chef JSON and uploading...
Running chef-solo...
[2013-06-16T10:36:32-07:00] INFO: *** Chef 11.4.4 ***
[2013-06-16T10:36:32-07:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
[2013-06-16T10:36:32-07:00] INFO: Run List is [recipe[myface::default]]
[2013-06-16T10:36:32-07:00] INFO: Run List expands to [myface::default]
[2013-06-16T10:36:32-07:00] INFO: Starting Chef Run for myface-berkshelf
[2013-06-16T10:36:32-07:00] INFO: Running start handlers
[2013-06-16T10:36:32-07:00] INFO: Start handlers complete.
[2013-06-16T10:36:32-07:00] INFO: Processing group[myface] action create (myface::default line 10)
[2013-06-16T10:36:32-07:00] INFO: group[myface] created
[2013-06-16T10:36:32-07:00] INFO: Processing user[myface] action create (myface::default line 12)
[2013-06-16T10:36:32-07:00] INFO: user[myface] created
[2013-06-16T10:36:32-07:00] INFO: Chef Run complete in 0.144073876 seconds
[2013-06-16T10:36:32-07:00] INFO: Running report handlers
[2013-06-16T10:36:32-07:00] INFO: Report handlers complete
</code></pre>

<p>You should expect to see the Chef run complete with no errors.  Notice
that it also creates <code>group[myface]</code> and <code>user[myface]</code>.</p>

<h2 id="testing-iteration-1">Testing Iteration #1</h2>

<p>Verify that Chef actually created the myface user on our test virtual
machine by running the following:</p>

<pre><code>$ vagrant ssh -c "getent passwd myface"
myface:x:497:503::/home/myface:/bin/bash
</code></pre>

<p>We use <code>vagrant ssh -c</code> to run a command on our test virtual machine.  The
<code>getent</code> command can be used to query all user databases.  In this
case we’re looking for <code>myface</code>, and it exists!</p>

<p>Because we are using well-defined resources that are completely
<a href="http://en.wikipedia.org/wiki/Idempotence">idempotent</a>, you should notice
that if you run <code>vagrant provision</code> again, the Chef run executes more quickly
and it does not try to re-create the user/group it already created.</p>

<pre><code>$ vagrant provision
[Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/default/vagrant/berkshelf-20130722-92068-1y18eun-default'
[Berkshelf] Using myface (0.1.0)
[default] Chef 11.4.4 Omnibus package is already installed.
[default] Running provisioner: chef_solo...
Generating chef JSON and uploading...
Running chef-solo...
[2013-06-16T10:39:11-07:00] INFO: *** Chef 11.4.4 ***
[2013-06-16T10:39:12-07:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
[2013-06-16T10:39:12-07:00] INFO: Run List is [recipe[myface::default]]
[2013-06-16T10:39:12-07:00] INFO: Run List expands to [myface::default]
[2013-06-16T10:39:12-07:00] INFO: Starting Chef Run for myface-berkshelf
[2013-06-16T10:39:12-07:00] INFO: Running start handlers
[2013-06-16T10:39:12-07:00] INFO: Start handlers complete.
[2013-06-16T10:39:12-07:00] INFO: Processing group[myface] action create (myface::default line 10)
[2013-06-16T10:39:12-07:00] INFO: Processing user[myface] action create (myface::default line 12)
[2013-06-16T10:39:12-07:00] INFO: Chef Run complete in 0.033772034 seconds
[2013-06-16T10:39:12-07:00] INFO: Running report handlers
[2013-06-16T10:39:12-07:00] INFO: Report handlers complete
</code></pre>

<h1 id="iteration-2---refactor-to-attributes">Iteration #2 - Refactor to attributes</h1>
<p>What if at some point you wanted to change the name of the <code>myface</code> user/group
you just created to something else?  At the moment, you would need to edit
<code>myface/recipes/default.rb</code> in three places.</p>

<p>Let’s create a new file called <code>myface/attributes/default.rb</code> which
initializes Chef <a href="http://docs.opscode.com/essentials_cookbook_attribute_files.html">attributes</a>
defining the user name and group name under which our application will run so
that you <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">don’t repeat yourself</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/attributes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In Chef, attributes are a hash of a hash used to override the default settings
on a node.  The first hash is the cookbook name - in our
case we’ve named our cookbook <code>:myface</code>. The second hash is the name of
our attribute - in this case, we’re defining two new attributes: <code>:user</code> and
<code>:group</code>.</p>

<p><code>default</code> implies the use of the <a href="http://docs.opscode.com/chef/essentials_node_object.html">node object</a>
<code>node.default</code> and is a Chef attribute file shorthand.  The following are
equivalent definitions to the ones above:</p>

<pre><code>node.default[:myface][:user] = "myface"
node.default[:myface][:user] = "myface"
</code></pre>

<p>Also note the use of symbols instead of strings.  It is <a href="http://www.robertsosinski.com/2009/01/11/the-difference-between-ruby-symbols-and-strings/">strongly recommended
that you use symbols instead of strings</a>
for hash indexes. </p>

<p>Now that you’ve created your attribute definitions, edit
<code>myface/recipes/default.rb</code> and replace all references to the “myface” user name
with <code>node[:myface][:user]</code> and all references to the “myface” group with
<code>node[:myface][:group]</code>.  <code>myface/recipes/default.rb</code> should now look like
this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Cookbook Name:: myface</span>
</span><span class='line'><span class="c1"># Recipe:: default</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;user node[:myface][:user] do</span>
</span><span class='line'><span class="sr">  group node[:myface][:group]</span>
</span><span class='line'><span class="sr">  system true</span>
</span><span class='line'><span class="sr">  shell “/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Re-provision with <code>vagrant provision</code> to see how the refactor went:</p>

<pre><code>$ vagrant provision
</code></pre>

<p>As long as you didn’t create any syntax errors in your refactoring file edits,
there should be no net change on the virtual machine test node (as you’ve only
just moved some strings into a node attribute).  </p>

<h2 id="testing-iteration-2">Testing Iteration #2</h2>

<p>Running  <code>getent</code> on the test virtual machine should also produce the same
result as when you validated Iteration #1:</p>

<pre><code>$ vagrant ssh -c "getent passwd myface"
myface:x:497:503::/home/myface:/bin/bash
</code></pre>

<h1 id="iteration-3---install-the-apache2-web-server">Iteration #3 - Install the Apache2 Web Server</h1>
<p>Our hot new social networking application, myface, is a web app, so we need
to install a web server.  Let’s install the Apache2 web server.</p>

<p>Modify <code>myface/recipes/default.rb</code> to include the apache2 cookbook’s default
recipe:</p>

<pre><code>include_recipe "apache2"
</code></pre>

<p>The resultant <code>myface/recipes/default.rb</code> file should look like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Cookbook Name:: myface</span>
</span><span class='line'><span class="c1"># Recipe:: default</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;user node[:myface][:user] do</span>
</span><span class='line'><span class="sr">  group node[:myface][:group]</span>
</span><span class='line'><span class="sr">  system true</span>
</span><span class='line'><span class="sr">  shell “/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;include_recipe “apache2”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since you are loading Apache2 from another cookbook, you need to configure the
dependency in your metadata.  Edit <code>myface/metadata.rb</code> and add the <code>apache2</code>
dependency at the bottom:</p>

<pre><code>depends "apache2", "~&gt; 1.6.0"
</code></pre>

<p>This tells Chef that the myface cookbook depends on the apache2 cookbook.
We’ve also specified a version constraint using the optimistic operator
<code>~&gt;</code> to tell our Chef that we want the latest version of the apache2 cookbook
that is greater than 1.6.0 but <em>not</em> 1.7.0 or higher.</p>

<p>It is recommended that Chef cookbooks follow a
<a href="http://semver.org/">Semantic Versioning</a> scheme.  So if you write your
cookbook to use the latest apache2 1.6.x cookbook, if the apache2 cookbook is
ever bumped to a 1.7.x version (or 2.x), it has some public API functionality
that has at least been deprecated.  So you’ll want to review the changes and
test before automatically using an apache2 cookbook version 1.7.x or higher.
However, automatic use of any new 1.6.x is perfectly fine, because no
only backwards-compatible bug fixes has been introduced.  Semantic Versioning
guarantees there are no changes in the public APIs.</p>

<p>Your <code>myface/metadata.rb</code> file should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/metadata.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span>             <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">maintainer</span>       <span class="err">“</span><span class="no">YOUR_NAME</span><span class="err">”</span>
</span><span class='line'><span class="n">maintainer_email</span> <span class="err">“</span><span class="no">YOUR_EMAIL</span><span class="err">”</span>
</span><span class='line'><span class="n">license</span>          <span class="err">“</span><span class="no">All</span> <span class="n">rights</span> <span class="n">reserved</span><span class="err">”</span>
</span><span class='line'><span class="n">description</span>      <span class="err">“</span><span class="no">Installs</span><span class="o">/</span><span class="no">Configures</span> <span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">long_description</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;), ‘README.md’))</span>
</span><span class='line'><span class="sr">version          “0.1.0”&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">depends</span> <span class="err">“</span><span class="n">apache2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">~&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now when you re-run <code>vagrant provision</code> it will install apache2 on your
test virtual machine:</p>

<pre><code>$ vagrant provision
...
[2013-07-22T22:46:24-07:00] INFO: service[apache2] started
[2013-07-22T22:46:24-07:00] INFO: template[/etc/httpd/mods-available/deflate.conf] sending restart action to service[apache2] (delayed)
[2013-07-22T22:46:24-07:00] INFO: Processing service[apache2] action restart (apache2::default line 221)
[2013-07-22T22:46:25-07:00] INFO: service[apache2] restarted
[2013-07-22T22:46:25-07:00] INFO: Chef Run complete in 58.358137105 seconds
[2013-07-22T22:46:25-07:00] INFO: Running report handlers
[2013-07-22T22:46:25-07:00] INFO: Report handlers complete
</code></pre>

<h2 id="testing-iteration-3">Testing Iteration #3</h2>

<p>You can verify that the apache2 <code>httpd</code> service is running on your berkshelf
virtual machine with the following command:</p>

<pre><code>$ vagrant ssh -c "sudo /sbin/service httpd status"
httpd (pid  4790) is running.
</code></pre>

<p>Since this is a web server, so you can also check it out in your favorite web
browser.  The host-only private network address for the virtual machine
that Berkshelf created is in the <code>Vagrantfile</code>.  Display the IP address with
the following command:</p>

<pre><code>$ grep ip: Vagrantfile
config.vm.network :private_network, ip: "33.33.33.10"
</code></pre>

<p>Check it out with your favorite web browser:</p>

<p><a href="http://33.33.33.10">http://33.33.33.10</a></p>

<p>While you will get a <code>404 Not Found</code> error because we haven’t added any
content to our web site yet, the important part is that <code>Apache Server
at 33.33.33.10 Port 80</code> sent the response:</p>

<p><img src="/images/apachewebserver.png" alt="Apache Server Response" /></p>

<p>Wait a second, though.  You never downloaded the <code>apache2</code> cookbook!
That’s the magic of the Berkshelf Vagrant plugin you installed earlier.  The
Berkshelf Vagrant plugin will make sure that any changes you make to your
cookbook and all of your cookbook’s dependencies are made available to your
virtual machine.  Berkshelf automatically loads all your cookbook dependencies
much like Bundler automatically loads all your gem dependencies.</p>

<p>Where does the Berkshelf put the cookbooks it downloads?  You can find them
in <code>~/.berkshelf/cookbooks</code></p>

<pre><code>Users/misheska/.berkshelf/cookbooks
└── apache2-1.6.6
    ├── attributes
    ├── definitions
    ├── files
    │   └── default
    │       └── tests
    │           └── minitest
    │               └── support
    ├── recipes
    └── templates
        └── default
            └── mods
</code></pre>

<p><code>~/.berkshelf</code> is just the default location where Berkshelf stores data
on your local disk.  This location can be altered by setting the environment
variable <code>BERKSHELF_PATH</code>.</p>

<h1 id="iteration-4---add-content">Iteration #4 - Add Content</h1>
<p>Let’s add some content to make that 404 go away.  Edit
<code>myface/recipes/default.rb</code> as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Cookbook Name:: myface</span>
</span><span class='line'><span class="c1"># Recipe:: default</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;user node[:myface][:user] do</span>
</span><span class='line'><span class="sr">  group node[:myface][:group]</span>
</span><span class='line'><span class="sr">  system true</span>
</span><span class='line'><span class="sr">  shell “/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;include_recipe “apache2”&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;disable-default-site&quot;</span><span class="o">&gt;</span><span class="n">disable</span> <span class="n">default</span> <span class="n">site</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;apache_site “000-default” do</span>
</span><span class='line'><span class="sr">  enable false</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;create-apache-config&quot;</span><span class="o">&gt;</span><span class="n">create</span> <span class="n">apache</span> <span class="n">config</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;template “</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="sr">/si</span><span class="n">tes</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">myface</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="err">“</span><span class="n">apache2</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">erb</span><span class="err">”</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="err">‘</span><span class="n">service</span><span class="o">[</span><span class="n">apache2</span><span class="o">]</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;create-document-root&quot;&gt;create document root&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">directory</span> <span class="err">“</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;write-site&quot;&gt;write site&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="err">“</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="err">“</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span><span class="err">”</span>
</span><span class='line'>  <span class="n">mode</span> <span class="err">“</span><span class="mo">0644</span><span class="err">”</span> <span class="c1"># forget me to create debugging exercise</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;enable-myface&quot;&gt;enable myface&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">apache_site</span> <span class="err">“</span><span class="n">myface</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">enable</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you’re familiar with Chef and configuring a web app via apache2, nothing
here should be too surprising.  But if not, spend some time reading up on
the resource references at <a href="http://docs.opscode.com">http://docs.opscode.com</a></p>

<p>With Chef, you can create config files from templates using
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html">ERB</a>, a
Ruby templating system.  Create a new template file called
<code>myface/templates/default/apache2.conf.erb</code> which will become the
file <code>.../sites-available/myface.conf</code> on our test virtual machine
(refer to <code>myface/recipes/default.rb</code> above):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/templates/default/apache2.conf.erb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Managed by Chef for &amp;lt;%= node[:hostname] %&amp;gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Alias</span> <span class="o">/</span> <span class="sr">/srv/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="o">/&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;lt;Directory /s</span><span class="n">rv</span><span class="o">/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>	<span class="no">Options</span> <span class="no">FollowSymLinks</span> <span class="o">+</span><span class="no">Indexes</span>
</span><span class='line'>	<span class="no">Allow</span> <span class="n">from</span> <span class="no">All</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="no">Directory</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also create our web site content as <code>myface/templates/default/index.html.erb</code>.
While it doesn’t take advantage of ERB templating yet, it will in further
iterations.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/templates/default/index.html.erb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Welcome</span> <span class="n">to</span> <span class="no">MyFace</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After you have created these three files, run <code>vagrant provision</code> to deploy
your changes:</p>

<pre><code>$ vagrant provision
</code></pre>

<h2 id="testing-iteration-4">Testing Iteration #4</h2>

<p>If the Chef run completed successfully, if you point your web browser at your
myface web site again:</p>

<p><a href="http://33.33.33.10">http://33.33.33.10</a></p>

<p>You’ll see some lovely content!</p>

<p><img src="/images/welcometomyface.png" alt="Welcome to MyFace" /></p>

<h1 id="iteration-5---refactoring-webserver">Iteration #5 - Refactoring webserver</h1>
<p><code>myface/recipes/default.rb</code> is getting rather large and we’ve got a lot more
to add to our cookbook.  Let’s go through another refactoring pass.</p>

<p>Let’s move all the webserver-related resources to their own file
<code>myface/recipes/webserver.rb</code>.  Rename <code>myface/recipes/default.rb</code> to
<code>myface/recipes/webserver.rb</code>.</p>

<p>Now <code>myface/recipes/webserver.rb</code> should look like this: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/webserver.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Cookbook Name:: myface</span>
</span><span class='line'><span class="c1"># Recipe:: webserver</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;user node[:myface][:user] do</span>
</span><span class='line'><span class="sr">  group node[:myface][:group]</span>
</span><span class='line'><span class="sr">  system true</span>
</span><span class='line'><span class="sr">  shell “/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;include_recipe “apache2”&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;disable-default-site-1&quot;</span><span class="o">&gt;</span><span class="n">disable</span> <span class="n">default</span> <span class="n">site</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;apache_site “000-default” do</span>
</span><span class='line'><span class="sr">  enable false</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;create-apache-config-1&quot;</span><span class="o">&gt;</span><span class="n">create</span> <span class="n">apache</span> <span class="n">config</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;template “</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="sr">/si</span><span class="n">tes</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">myface</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="err">“</span><span class="n">apache2</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">erb</span><span class="err">”</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="err">‘</span><span class="n">service</span><span class="o">[</span><span class="n">apache2</span><span class="o">]</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;create-document-root-1&quot;&gt;create document root&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">directory</span> <span class="err">“</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;write-site-1&quot;&gt;write site&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="err">“</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="err">“</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span><span class="err">”</span>
</span><span class='line'>  <span class="n">mode</span> <span class="err">“</span><span class="mo">0644</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;enable-myface-1&quot;&gt;enable myface&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">apache_site</span> <span class="err">“</span><span class="n">myface</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">enable</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Create a new <code>myface/recipes/default.rb</code> file which references <code>webserver.rb</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;cookbook-name-myface&quot;&gt;Cookbook Name:: myface&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1"># Recipe:: default</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">include_recipe</span> <span class="err">“</span><span class="ss">myface</span><span class="p">:</span><span class="ss">:webserver</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Converge your node again to make sure there are no syntax errors:</p>

<pre><code>$ vagrant provision
</code></pre>

<p>Let’s eliminate some more of the duplication that crept in while we were
working on things.  Edit <code>myface/attributes/default.rb</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/attributes/default.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:config</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">myface</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:document_root</span><span class="o">]</span> <span class="o">=</span> <span class="err">“</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">apache</span><span class="o">/</span><span class="n">myface</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>NOTE: With Chef 11, it is now possible to nest attributes, like so:</p>

<pre><code>node.default[:app][:name] = "my_app"
node.default[:app][:document_root] = "/srv/apache/#{node[:app][:name]}"
</code></pre>

<p>This approach is overkill for MyFace (and is frankly overkill for most
Chef recipes).  Even though nesting is an option now with Chef 11, you should
try to keep your attribute files as simple and straightforward to follow as
possible.</p>

<p>In <code>myface/recipes/webserver.rb</code> replace the corresponding hardcoded references
to attribute references: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/recipes/webserver.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Cookbook Name:: myface</span>
</span><span class='line'><span class="c1"># Recipe:: webserver</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Copyright (C) 2013 YOUR_NAME</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="ss">:myface</span><span class="o">][</span><span class="ss">:group</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;user node[:myface][:user] do</span>
</span><span class='line'><span class="sr">  group node[:myface][:group]</span>
</span><span class='line'><span class="sr">  system true</span>
</span><span class='line'><span class="sr">  shell “/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;include_recipe “apache2”&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;disable-default-site-2&quot;</span><span class="o">&gt;</span><span class="n">disable</span> <span class="n">default</span> <span class="n">site</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;apache_site “000-default” do</span>
</span><span class='line'><span class="sr">  enable false</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;create-apache-config-2&quot;</span><span class="o">&gt;</span><span class="n">create</span> <span class="n">apache</span> <span class="n">config</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;template “</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="sr">/si</span><span class="n">tes</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="c1">#{node[:myface][:config]}” do</span>
</span><span class='line'>  <span class="n">source</span> <span class="err">“</span><span class="n">apache2</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">erb</span><span class="err">”</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="err">‘</span><span class="n">service</span><span class="o">[</span><span class="n">apache2</span><span class="o">]</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;create-document-root-2&quot;&gt;create document root&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">directory</span> <span class="err">“</span><span class="c1">#{node[:myface][:document_root]}” do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;write-site-2&quot;&gt;write site&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="err">“</span><span class="c1">#{node[:myface][:document_root]}/index.html” do</span>
</span><span class='line'>  <span class="n">source</span> <span class="err">“</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span><span class="err">”</span>
</span><span class='line'>  <span class="n">mode</span> <span class="err">“</span><span class="mo">0644</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;enable-myface-2&quot;&gt;enable myface&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">apache_site</span> <span class="err">“</span><span class="c1">#{node[:myface][:config]}” do</span>
</span><span class='line'>  <span class="n">enable</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Converge your node one last time to make sure there are no syntax errors:</p>

<pre><code>$ vagrant provision
</code></pre>

<h2 id="testing-iteration-5">Testing Iteration #5</h2>

<p>Visiting <a href="http://33.33.33.10">http://33.33.33.10</a> should produce the same result as before as you
have made no net changes, just shuffled things around a bit.</p>

<h1 id="iteration-6---version-bump-and-production-deploy">Iteration #6 - Version Bump and Production Deploy</h1>
<p>Now that we have tested our cookbook locally and everything seems to work,
we’re ready to finalize the cookbook and deploy it to production.</p>

<h2 id="version-bump-to-100">Version Bump to 1.0.0</h2>

<p>First you need to “bump” the cookbook version in the <code>metadata.rb</code> file to
its final version 1.0.0.  As mentioned in Iteration #3, cookbooks (even the
ones you write), should follow the
<a href="http://semver.org/">Semantic Versioning scheme</a>.  Since this is the first
public version of our cookbook, it’s version 1.0.0.</p>

<p><code>myface/metadata.rb</code> should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myface/metadata.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span>             <span class="err">“</span><span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">maintainer</span>       <span class="err">“</span><span class="no">YOUR_NAME</span><span class="err">”</span>
</span><span class='line'><span class="n">maintainer_email</span> <span class="err">“</span><span class="no">YOUR_EMAIL</span><span class="err">”</span>
</span><span class='line'><span class="n">license</span>          <span class="err">“</span><span class="no">All</span> <span class="n">rights</span> <span class="n">reserved</span><span class="err">”</span>
</span><span class='line'><span class="n">description</span>      <span class="err">“</span><span class="no">Installs</span><span class="o">/</span><span class="no">Configures</span> <span class="n">myface</span><span class="err">”</span>
</span><span class='line'><span class="n">long_description</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;), ‘README.md’))</span>
</span><span class='line'><span class="sr">version          “1.0.0”&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">depends</span> <span class="err">“</span><span class="n">apache2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">~&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It’s left as an exercise for the reader to finalize the license and
<code>README</code> before finalizing the cookbook.</p>

<h2 id="configure-berkshelf">Configure Berkshelf</h2>

<p>In order to deploy to your production server (instead of just locally with
vagrant), you’ll need to add a section to your Berkshelf config file with
your production Chef settings.  The config file is located in
<code>$HOME/.berkshelf/config.json</code>.</p>

<p>For example, I’m using hosted Chef to manage my servers, so my
Chef settings are as follows:</p>

<pre><code>Chef Server API URL endpoint: https://api.opscode.com/organizations/misheska
Chef API validation client name: misheska-validator
Chef API validation key path: /Users/misheska/.chef/misheska-validator.pem
Chef API client key: /Users/misheska/.chef/misheska.pem
Chef API node name: misheska
</code></pre>

<p>So here’s what my <code>$HOME/.berkshelf/config.json</code> file looks like:</p>

<pre><code>{
  "chef":{
    "chef_server_url": "https://api.opscode.com/organizations/misheska",
    "validation_client_name": "misheska-validator",
    "validation_key_path": "/Users/mischa/.chef/misheska-validator.pem",
    "client_key": "/Users/mischa/.chef/misheska.pem",
    "node_name":"misheska"
  },
  "vagrant":{
    "vm":{
      "box": "misheska-centos-6.4",
      "box_url":"https://www.dropbox.com/s/y42egyh9cqsge24/misheska-centos-6.4.box",
      "forward_port": {
      },
      "network":{
        "bridged": false,
        "hostonly": "33.33.33.10"
      },
      "provision": "chef_solo"
    }
  },
  "ssl": {
    "verify":false
  }
}
</code></pre>

<p>I assume you have your own production Chef setup either running 
<a href="http://www.opscode.com/hosted-chef/">Hosted Chef</a>,
<a href="http://www.opscode.com/private-chef/">Private Chef</a>, or
<a href="http://docs.opscode.com/chef/manage_server_open_source.html">Open Source Chef Server</a>.  If you need more help getting your .pem file values, refer to
the <a href="https://learnchef.opscode.com/quickstart/chef-repo/">QuickStart Guide on LearnChef</a>.</p>

<h2 id="upload-cookbooks">Upload cookbooks</h2>

<p>Edit your <code>$HOME/.berkshelf/config.json</code> file similarly with your .pem file
values.  Then run <code>berks upload</code> to upload your cookbooks to the chef server:</p>

<pre><code>$ berks upload
Using myface (1.0.0)
Using apache2 (1.6.6)
Uploading myface (1.0.0) to: 'https://api.opscode.com:443/organizations/misheska'
Uploading apache2 (1.6.6) to: 'https://api.opscode.com:443/organizations/misheska'
</code></pre>

<p>Similarly to when you ran <code>vagrant up</code>, Berkshelf automatically uploaded all
the cookbook dependencies.</p>

<h2 id="converge-node">Converge node</h2>

<p>Add the default <code>myface</code> cookbook recipe to your node’s run list.  For example,
I used the following command to add <code>myface</code> to mine:</p>

<pre><code>$ knife node run_list add mischa-ubuntu 'recipe[myface]'
mischa-ubuntu:
  run_list: recipe[myface]
</code></pre>

<p>Converge the node by running <code>chef-client</code> (if you don’t already have it
setup to run chef-client automatically).  For example, here’s the command
I used to run <code>chef-client</code> on my production node:</p>

<pre><code>$ knife ssh name:mischa-ubuntu "sudo chef-client" -x misheska
Starting Chef Client, version 11.4.4
resolving cookbooks for run list: ["myface"]
Synchronizing Cookbooks:
  - myface
  - apache2
...
Chef Client finished, 20 resources updated 
</code></pre>

<h2 id="testing-iteration-6">Testing Iteration #6</h2>

<p>Browsing your production node’s URL should produce the same result as when
you tested Iteration #4.  For example, I visited <a href="http://mischa-ubuntu">http://mischa-ubuntu</a> </p>

<h1 id="more-to-come">More to Come!</h1>
<p>This is just part one of a multi-part series.  So far you’ve gone through
several short iteration loops as you evolve the myface cookbook web
application.  In <a href="http://misheska.com/blog/2013/06/23/getting-started-writing-chef-cookbooks-the-berkshelf-way-part2/">Part 2</a>,
we’ll wire up a database to the myface application and explore the use of
the <code>mysql</code> and <code>database</code> cookbooks.</p>

<p>If you want to see the full source for myface, check out the following
GitHub link: <a href="https://github.com/misheska/myface">https://github.com/misheska/myface</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Opscode Chef Omnibus Ruby for writing cookbooks]]></title>
    <link href="http://misheska.com/blog/2013/06/16/use-opscode-chef-omnibus-ruby-for-writing-cookbooks/"/>
    <updated>2013-06-16T02:35:00-07:00</updated>
    <id>http://misheska.com/blog/2013/06/16/use-opscode-chef-omnibus-ruby-for-writing-cookbooks</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#how-to-set-up-omnibus-chef-ruby-on-mac-os-x">How to set up Omnibus Chef Ruby on Mac OS X</a></li>
  <li><a href="#how-to-set-up-omnibus-chef-ruby-on-linux">How to set up Omnibus Chef Ruby on Linux</a></li>
  <li><a href="#how-to-set-up-omnibus-chef-ruby-on-windows">How to set up Omnibus Chef Ruby on Windows</a></li>
</ul>

<p>If your only use of Ruby is because you want to write cookbooks for Opscode
Chef, rather than going through the bother of setting up a full Ruby
development environment via <a href="http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/">rvm</a> or <a href="http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby/">rbenv</a>
you can just reuse the Ruby 1.9.x environment that is bundled with the
Opscode Omnibus Chef installer.</p>

<p>In this post, I’ll cover how to configure the Ruby 1.9.x interpreter bundled
with the Opscode Omnibus Chef installer on Mac OS X, Linux and Windows so
it can be used for writing cookbooks.</p>

<h1 id="how-to-set-up-omnibus-chef-ruby-on-mac-os-x">How to set up Omnibus Chef Ruby on Mac OS X</h1>
<p>First install Apple Xcode, which includes a C compiler needed to build the
tools required for cookbook development from source (like
<a href="http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/">Berkshelf</a> ).
Download and install the latest version of Xcode from the App Store, if you
don’t have it installed already.  Also make sure you install the <em>Command Line
Tools</em> by choosing the menu item <code>Xcode -&gt; Preferences...</code> and click
on the <em>Downloads</em> tab.  Click on the <em>Install</em> button to download the
Command Line Tools.
<img src="/images/xcodecommandline.png" alt="Xcode Command Line Tools" /></p>

<p>In a web browser, go to the <a href="http://www.opscode.com/chef/install">http://www.opscode.com/chef/install</a> page to
display the instructions for installing the Chef Client via the Opscode
Omnibus Chef installer.</p>

<p>As of this writing, the quick install instructions for Mac OS X are as
follows:</p>

<pre><code>$ curl -L https://www.opscode.com/chef/install.sh | sudo bash
</code></pre>

<p>The Chef Client installer also installs Ruby 1.9.3 for its own use in
the directory <code>/opt/chef/embedded</code>.  You can also use this copy of Ruby
for your own cookbook development.</p>

<p>WARNING: Don’t try to mix and match the Chef Client’s Ruby 1.9.3 together
with a RVM/rbenv Ruby development setup.  Choose one or the other.  If your
Ruby needs go beyond Chef and writing Chef cookbooks, set up a “real”
RVM/rbenv Ruby environment.</p>

<p>Now that you have a Ruby 1.9.3 environment via the Chef Client install, you
can install any extra gem dependencies needed for writing Chef cookbooks by
using the <code>/opt/chef/embedded/bin/gem install</code> command.  For example, here’s
how to install Berkshelf, a popular cookbook authoring support tool:</p>

<pre><code>$ sudo /opt/chef/embedded/bin/gem install berkshelf --no-ri --no-rdoc
Password:
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.7.7.gem (100%)
Fetching: activesupport-3.2.13.gem (100%)
...
Successfully installed safe_yaml-0.9.3
Successfully installed test-kitchen-1.0.0.alpha.7
Successfully installed berkshelf-2.0.3
43 gems installed
</code></pre>

<p>Create a soft link to any gem-installed binaries in an existing PATH directory,
like <code>/usr/local/bin</code></p>

<pre><code># On Mac OS X, /usr/local/bin is not created by default
$ sudo mkdir -p /usr/local/bin
Password:
$ sudo ln -s /opt/chef/embedded/bin/berks /usr/local/bin/berks
$ berks -v
Berkshelf (2.0.3)
</code></pre>

<p>Don’t be tempted to add <code>/opt/chef/embedded/bin</code> to your PATH.  You still want
to keep Opscode’s Ruby install separate from your main system Ruby install.</p>

<h1 id="how-to-set-up-omnibus-chef-ruby-on-linux">How to set up Omnibus Chef Ruby on Linux</h1>
<p>Make sure all the prerequisite packages are installed for the gems you will
be using.</p>

<p>Ubuntu prerequisites:</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install -y curl
$ sudo apt-get install -y build-essential git
$ sudo apt-get install -y libxml2-dev libxslt-dev libssl-dev
</code></pre>

<p>RHEL/CentOS prerequisites:</p>

<pre><code>$ sudo yum update
$ sudo yum install -y curl
$ sudo yum install -y git
$ sudo yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel
$ sudo yum install -y libyaml-devel libffi-devel openssl-devel make bzip2
$ sudo yum install -y autoconf automake libtool bison
$ sudo yum install -y libxml2-devel libxslt-devel
</code></pre>

<p>In a web browser, go to the <a href="http://www.opscode.com/chef/install">http://www.opscode.com/chef/install</a> page to
display the instructions for installing the Chef Client via the Opscode
Omnibus Chef installer for your distribution of Linux.</p>

<p>As of this writing, the quick install instructions for Ubuntu/CentOS are as
follows:</p>

<pre><code>$ curl -L https://www.opscode.com/chef/install.sh | sudo bash
</code></pre>

<p>The Chef Client installer also installs Ruby 1.9.3 for its own use in
the directory <code>/opt/chef/embedded</code>.  You can also use this copy of Ruby
for your own cookbook development.</p>

<p>WARNING: Don’t try to mix and match the Chef Client’s Ruby 1.9.3 together
with a RVM/rbenv Ruby development setup.  Choose one or the other.  If your
Ruby needs go beyond Chef and writing Chef cookbooks, set up a “real”
RVM/rbenv Ruby environment.</p>

<p>Now that you have a Ruby 1.9.3 environment via the Chef Client install, you
can install any extra gem dependencies needed for writing Chef cookbooks by
using the <code>/opt/chef/embedded/bin/gem install</code> command.  For example, here’s
how to install Berkshelf, a popular cookbook authoring support tool:</p>

<pre><code>$ sudo /opt/chef/embedded/bin/gem install berkshelf --no-ri --no-rdoc
Password:
Building native extensions.  This could take a while...
Fetching: httpclient-2.2.0.2.gem (100%)
Fetching: rubyntlm-0.1.1.gem (100%)
Fetching: uuidtools-2.1.4.gem (100%)
...
Successfully installed safe_yaml-0.9.3
Successfully installed test-kitchen-1.0.0.alpha.7
Successfully installed berkshelf-2.0.3
25 gems installed
</code></pre>

<p>Create a soft link to any gem-installed binaries in an existing PATH directory,
like <code>/usr/local/bin</code></p>

<pre><code>$ sudo ln -s /opt/chef/embedded/bin/berks /usr/local/bin/berks
$ berks -v
Berkshelf (2.0.3)
</code></pre>

<p>Don’t be tempted to add <code>/opt/chef/embedded/bin</code> to your PATH.  You still want
to keep Opscode’s Ruby install separate from your main system Ruby install.</p>

<h1 id="how-to-set-up-omnibus-chef-ruby-on-windows">How to set up Omnibus Chef Ruby on Windows</h1>
<p>In a web browser, go to the <a href="http://www.opscode.com/chef/install">http://www.opscode.com/chef/install</a> page to
display the instructions for installing the Chef Client via the Opscode
Omnibus Chef installer for your distribution of Linux.</p>

<p>After you select a Chef verison (pick the latest), you will be provided
a download link to the Omnibus Chef Windows installer.  After downloading
Run the install, choosing the default options.</p>

<p>The Chef Client installer also installs Ruby 1.9.3 for its own use in
the directory <code>C:\opscode\chef\embedded</code>.  You can also use this copy of Ruby
for your own cookbook development.</p>

<p>WARNING: Don’t try to mix and match the Chef Client’s Ruby 1.9.3 together
with a RVM/rbenv Ruby development setup.  Choose one or the other.  If your
Ruby needs go beyond Chef and writing Chef cookbooks, set up a “real”
RVM/rbenv Ruby environment.</p>

<p>Now that you have a Ruby 1.9.3 environment via the Chef Client install, you
can install any extra gem dependencies needed for writing Chef cookbooks by
using the <code>c:\opscode\chef\embedded\bin install</code> command.  For example,
here’s how to install Berkshelf, a popular cookbook authoring support tool:</p>

<pre><code>&gt; c:\opscode\chef\embedded\bin\gem install berkshelf --no-ri --no-rdoc
Fetching: i18n-0.6.1.gem (100%)
Fetching: multi_json-1.7.7.gem (100%)
Fetching: activesupport-3.2.13.gem (100%)
...
Successfully installed safe_yaml-0.9.3
Successfully installed test-kitchen-1.0.0.alpha.7
Successfully installed berkshelf-2.0.3
43 gems installed
</code></pre>

<p>Add <code>c:\opscode\chef\embedded\bin</code> to your PATH environment variable:
<img src="/images/opscodechefpathwin.png" alt="Environments Control Panel" /></p>

<p>Restart your Command Prompt to pick up the new environment variable setting,
and then you can run Berkshelf:</p>

<pre><code>&gt; berks -v
Berkshelf (2.0.3)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try out Sensu Monitoring using Virtual Box, Vagrant and Chef]]></title>
    <link href="http://misheska.com/blog/2013/02/28/try-out-sensu-monitoring-using-virtual-box%2C-vagrant-and-chef/"/>
    <updated>2013-02-28T22:54:00-08:00</updated>
    <id>http://misheska.com/blog/2013/02/28/try-out-sensu-monitoring-using-virtual-box,-vagrant-and-chef</id>
    <content type="html"><![CDATA[<p>I’ve been using Sensu Monitoring in production for about three to four months
now.  It’s a nice, lightweight monitoring framework, designed with the cloud
in mind and for use with modern configuration management frameworks like
Chef and Puppet.  For more information on Sensu, check out the article
<a href="https://github.com/sensu/sensu/wiki">Why Sonian created Sensu (by Sean Porter)</a>
and the associated articles and links on the <a href="https://github.com/sensu/sensu/wiki">Sensu Wiki</a></p>

<p>In this article, I’m going to present a quick overview on how to test and
evaluate Sensu using the <a href="https://github.com/sensu/sensu-chef">Sensu Chef Cookbook</a>
Through the magic of Oracle VirtualBox and Vagrant, combined with Chef, you
can quickly deploy Sensu to a local virtual machine instance, and kick the
tires on Sensu to evaluate whether or not it is a good monitoring solution
for you.  These instructions apply to Mac OS X, Linux, and/or Windows for
the host operating system.</p>

<h1 id="install-virtualbox">Install VirtualBox</h1>
<p>VirtualBox is an open source virtualization platform, similar to VMWare
Fusion/Workstation that runs on Mac OS X, Linux and Windows (and a few more
platforms).  While I personally prefer VMWare Fusion to VirtualBox (VirtualBox
can be a bit flakey at times), a lot of automation around VirtualBox has been
developed within the Chef community, which impossible to ignore.  Fortunately
on both Mac OS X and Linux, VirtualBox can peacefully coexist with VMWare
Fusion/Workstation (NOTE: If you use KVM virtualization on Linux, VirtualBox
can also coexist, but you need to be careful not to run VirtualBox and KVM
images simultaneously).</p>

<p>Just download and run the VirtualBox installer from the <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox download
page</a>.  Just download and install
the latest 4.2.x version of VirtualBox.  Make sure you save the VirtualBox
installer as it comes with an uninstall tool, should you wish to remove
VirtualBox at some point in the future.</p>

<h1 id="install-vagrant">Install Vagrant</h1>
<p>After installing VirtualBox, next install Vagrant.  Vagrant is an automation
framework for VirtualBox.  Grab the latest Vagrant installer for your OS from
the <a href="http://downloads.vagrantup.com/">Vagrant Downloads page</a> and run install.
On Mac OS X and Windows, the Vagrant install will automatically add the Vagrant
binaries to your PATH, on Linux, you will need to manually add
<code>/opt/vagrant/bin</code> per the <a href="http://docs.vagrantup.com/v1/docs/getting-started/index.html">Getting Started with Vagrant docs</a>.</p>

<h1 id="download-the-sensu-chef-cookbook">Download the sensu-chef cookbook</h1>
<p>Grab the latest version of the sensu-chef cookbook from GitHub by running
the following command:</p>

<pre><code>git clone https://github.com/sensu/sensu-chef.git
</code></pre>

<h1 id="install-ruby--rubygems">Install Ruby &amp; RubyGems</h1>
<p>The sensu-chef cookbook requires Ruby &amp; RubyGems.</p>

<p>On Mac OS X and Linux, I strongly recommend that you use either RVM or Rbenv
to make sure that you are using the latest version of Ruby instead of whatever
version of Ruby your system installs by default.</p>

<p>See my previous articles on <a href="http://misheska.com/blog/2013/02/24/using-rvm-to-manage-multiple-versions-of-ruby/">RVM</a> or <a href="http://misheska.com/blog/2013/02/24/using-rbenv-to-manage-multiple-versions-of-ruby/">Rbenv</a>.  NOTE: If you don’t
know whether or not to decide between RVM or Rbenv, go with RVM.</p>

<h1 id="patch-chef-sensu-vagrantfile">Patch chef-sensu Vagrantfile</h1>
<p>As of this writing, the <code>Vagrantfile</code> included in
<code>sensu-chef/examples</code> will not set up the VM properly and the
Chef run will fail with the following error:</p>

<pre><code>[default] Running chef-solo...
stdin: is not a tty
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: *** Chef 0.10.8 ***
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Setting the run_list to ["recipe[monitor::master]", "recipe[monitor::redis]", "recipe[monitor::rabbitmq]"] from JSON
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Run List is [recipe[monitor::master], recipe[monitor::redis], recipe[monitor::rabbitmq]]
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Run List expands to [monitor::master, monitor::redis, monitor::rabbitmq]
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Starting Chef Run for ubuntu-1204-i386
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Running start handlers
[Fri, 01 Mar 2013 08:28:06 +0000] INFO: Start handlers complete.
[Fri, 01 Mar 2013 08:28:07 +0000] ERROR: Running exception handlers
[Fri, 01 Mar 2013 08:28:07 +0000] ERROR: Exception handlers complete
[Fri, 01 Mar 2013 08:28:07 +0000] FATAL: Stacktrace dumped to /tmp/vagrant-chef-1/chef-stacktrace.out
[Fri, 01 Mar 2013 08:28:07 +0000] FATAL: NoMethodError: undefined method `default_action' for #&lt;Class:0x8decb20&gt;
Chef never successfully completed! Any errors should be visible in the output above. Please fix your recipes so that they properly complete.
</code></pre>

<p>I’ve created a revised <code>Vagrantfile</code> which fixes this issue.
Download this amended version and copy it in place of
<code>sensu-client/examples/Vagrantfile</code></p>

<p><div><script src='https://gist.github.com/5063291.js?file=Vagrantfile'></script>
<noscript><pre><code>#require 'berkshelf/vagrant'

Vagrant::Config.run do |config|
  config.vm.box = &quot;ubuntu-1204-i386&quot;
  config.vm.box_url = &quot;http://vagrant.sensuapp.org/ubuntu-1204-i386.box&quot;

  config.vm.customize [
    &quot;modifyvm&quot;, :id,
    &quot;--name&quot;, &quot;Sensu Stack&quot;,
    &quot;--memory&quot;, &quot;1024&quot;
  ]

  config.vm.provision :shell, :inline =&gt; &quot;apt-get install -y curl&quot;
  config.vm.provision :shell, :inline =&gt; &quot;curl -L https://www.opscode.com/chef/install.sh | bash&quot;

  config.vm.forward_port 8080, 8080
  config.vm.forward_port 9000, 9000

  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = &quot;cookbooks&quot;
    chef.data_bags_path = &quot;data_bags&quot;
    chef.add_recipe &quot;monitor::master&quot;
    chef.add_recipe &quot;monitor::redis&quot;
    chef.add_recipe &quot;monitor::rabbitmq&quot;
  end
end
</code></pre></noscript></div>
</p>

<h1 id="install-ruby-devkit-windows">Install Ruby DevKit (Windows)</h1>
<p>The sensu-chef recipe is dependent on the json gem.  On Windows, you will get
the following error if you do not have the proper Ruby DevKit installed:</p>

<pre><code>Installing json (1.7.7)
Gem::InstallError: The 'json' native gem requires installed build tools.
</code></pre>

<p>Go to <a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a>
and refer to the <em>Which Development Kit?</em> section of the web page about which
DevKit you need to install.</p>

<p>Download the appropriate DevKit toolkit, extract it and run the following
in a Command Prompt:</p>

<pre><code>&gt; ruby dk.rb init
[INFO] found RubyInstaller v1.9.3 at C:/Ruby193

Initialization complete! Please review and modify the auto-generated
'config.yml' file to ensure it contains the root directories to all
of the installed Rubies you want enhanced by the DevKit.

&gt; ruby dk.rb install
[INFO] Updating convenience notice gem override for 'C:/Ruby193'
[INFO] Installing 'C:/Ruby193/lib/ruby/site_ruby/devkit.rb'
</code></pre>

<h1 id="create-the-sensu-chef-virtual-machine">Create the sensu-chef virtual machine</h1>

<p>Run the following commands to create the sensu-chef virtual machine:</p>

<pre><code>cd sensu-chef/examples
gem install bundler
# On Windows, restart the command prompt before running 'bundle install' as
# gem install will reset the PATH
bundle install
librarian-chef install
vagrant up
</code></pre>

<p>If all goes well, the <code>chef-solo</code> run should have succeeded, and
you should be able to view the Sensu dashboard by going to the following URL
with the username <code>admin</code> and the password <code>secret</code>:
<a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img src="/images/sensudashboard.png" alt="Sensu Dashboard" /></p>

<p>If this is successful, on Mac OX and Linux, just run the following command to
log in to your newly-created virtual machine instance:</p>

<pre><code>vagrant ssh
</code></pre>

<p>On Windows, run the following command (or use a visual SSH client like PuTTY):</p>

<pre><code>ssh vagrant@127.0.0.1 -p 2222 -i C:/Users/misheska/.vagrant.d/insecure_private_key
</code></pre>

<p>And refer to the <a href="https://github.com/sensu/sensu/wiki">Sensu wiki</a> on how 
to experiment with various configuration options.</p>

<p>When you are done playing with the test VM, run the following command to
destroy the VM:</p>

<pre><code>vagrant destroy
</code></pre>
]]></content>
  </entry>
  
</feed>
